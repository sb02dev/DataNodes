# -*- coding: utf-8 -*-

"""This file was auto-generated by PyFlow exporter
    'Python exporter v1.0.0'
    Created: 07:09PM on September 30, 2025
"""

EXPORTER_NAME = 'Python exporter'
EXPORTER_VERSION = '1.0.0'


# ======================== VARIABLES AND PARAMETERS SETUP =========================
VARS = {}


# ================================ PACKAGE IMPORTS ================================
# pylint: disable=wrong-import-position
from sqlalchemy import (create_engine,
                        text)
import pandas as pd
import re
# pylint: enable=wrong-import-position

# ================================= PACKAGE SETUPS ================================


# ================================ SYSTEM FUNCTIONS ===============================
def connect_genericdb(connection_url):
    """Connect to a generic database according to the connection url"""
    engine = create_engine(connection_url)
    return engine

def queryDatabase(conn, sql, has_result, param_dict={}, **kwargs):
    # tranform parameters
    parameters = {}
    for k, v in kwargs.items():
        if not k in parameters:
            parameters[k] = v
    for k, v in param_dict.items():
        if not k in parameters:
            parameters[k] = v

    # query
    sqlstatements = [s
                     for s in sql.split(';\n')
                     if not re.search(r"^[;\s]*$", s)]
    table = None

    with conn.begin() as active_conn:
        for i, sqlstatement in enumerate(sqlstatements):
            if has_result and i==len(sqlstatements)-1: # only last statement can have result
                table = pd.read_sql_query(text(sqlstatement),
                                            active_conn,
                                            params=parameters)
            else:
                active_conn.execute(text(sqlstatement), parameters)
    
    return table

def GetValue(df, to_locate, column):
    if not isinstance(df, pd.DataFrame):
        return None
    return df.loc[to_locate][column]




# ============================== GRAPH IMPLEMENTATION =============================


# ================================== MAIN PROGRAM =================================


# ------- GenericDBConn_inExec -------
GenericDBConn_out = connect_genericdb('sqlite:///tests/temp/db.sdb')
SQLQuery_result = queryDatabase(GenericDBConn_out, """select 1 as id, 'aaa' as name;""", True)
GetValue_out = GetValue(SQLQuery_result, 0, 'name')
print(GetValue_out)
